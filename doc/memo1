new repository
名前設定
public
gitignore設定

$ rails new planets
$ vi .rvmrc => rvm 1.9.3
==============================================================================
= NOTICE                                                                     =
==============================================================================
= RVM has encountered a new or modified .rvmrc file in the current directory =
= This is a shell script and therefore may contain any shell commands.       =
=                                                                            =
= Examine the contents of this file carefully to be sure the contents are    =
= safe before trusting it! ( Choose v[iew] below to view the contents )      =
==============================================================================
Do you wish to trust this .rvmrc file? (/home/watarusato/seminer/test/planets/.rvmrc)
y[es], n[o], v[iew], c[ancel]> y
$ cd planets => y
$ git init
=> Initialized empty Git repository in /home/watarusato/seminer/test/planets/.git/
$ git status
$ git add .
$ git commit -m 'first-push'
$ git remote add origin git@github.com:wakkunn/planets.git
$ git push -u origin master
Counting objects: 63, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (49/49), done.
Writing objects: 100% (63/63), 25.92 KiB, done.
Total 63 (delta 2), reused 0 (delta 0)
To git@github.com:wakkunn/planets.git
 * [new branch]      master -> master
$ rm index.html
$ rails g controller top index
create  app/controllers/top_controller.rb
       route  get "top/index"
      invoke  erb
      create    app/views/top
      create    app/views/top/index.html.erb
      invoke  test_unit
      create    test/functional/top_controller_test.rb
      invoke  helper
      create    app/helpers/top_helper.rb
      invoke    test_unit
      create      test/unit/helpers/top_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/top.js.coffee
      invoke    scss
      create      app/assets/stylesheets/top.css.scss
$ vi .gitignore
# See http://help.github.com/ignore-files/ for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile ~/.gitignore_global

# Ignore bundler config
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
db/schema.rb

# Ignore all logfiles and tempfiles.
/log/*.log
/tmp
config/database.yml
.git
.rvmrc
.project
nbproject
プロジェクトをnetbeansに登録
routes.rb
Planets::Application.routes.draw do
  root :to => "top#index"
end

rails g controller announcements index

watarusato@thebes:~/seminer/test/planets$ rails g controller announcements index
      create  app/controllers/announcements_controller.rb
       route  get "announcements/index"
      invoke  erb
      create    app/views/announcements
      create    app/views/announcements/index.html.erb
      invoke  test_unit
      create    test/functional/announcements_controller_test.rb
      invoke  helper
      create    app/helpers/announcements_helper.rb
      invoke    test_unit
      create      test/unit/helpers/announcements_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/announcements.js.coffee
      invoke    scss
      create      app/assets/stylesheets/announcements.css.scss
watarusato@thebes:~/seminer/test/planets$ rails g model announement
invoke  active_record
      create    db/migrate/20120427050622_create_announcements.rb
      create    app/models/announcement.rb
      invoke    test_unit
      create      test/unit/announcement_test.rb
      create      test/fixtures/announcements.yml
トップのindexに追加
<%= link_to 'infomations', :announcements %>
gemに追加
gem 'mysql2'
gem "rails-i18n"
$ bundle install
database.ymlを変更
development:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  database: planets_development
  pool: 5
  username: root
  password:
  socket: /var/run/mysqld/mysqld.sock
  
test:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  database: planets_test
  pool: 5
  username: root
  password:
  socket: /var/run/mysqld/mysqld.sock

production:
  adapter: mysql2
  encoding: utf8
  reconnect: false
  database: planets_production
  pool: 5
  username: root
  password:
  socket: /var/run/mysqld/mysqld.sock
$ rake db:create
準備完了！
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
class CreateAnnouncements < ActiveRecord::Migration
  def change
    create_table :announcements do |t|
      t.string :subject, :null => false
      t.text :content
      
      t.timestamps
    end
  end
end
$ rake db:migrate
seeds.rbを変更
table_names = %w(announcements)
table_names.each do |table_name|
  dir = case Rails.env
  when 'development', 'staging'
    'development'
  when 'production'
    'production'
  end
  path = Rails.root.join('db', 'seeds', dir, "#{table_name}.rb")
  if File.exist?(path)
    puts "Creating #{table_name}..."
    require(path)
  end
end
seedsフォルダ作成
developmentフォルダ作成
annnouncemnts.rbを作成
# coding: utf-8
5.times do |n|
  Announcement.create(
    :subject => "第#{n+1}回赤坂リーグに参加しました！！",
    :content => "これは説明です" * 25
  )
end
モデルを変更
class Announcement < ActiveRecord::Base
  validates :subject, :content, :presence => true
  validates :subject, :uniqueness => true
  validates :content, :length => { :maximum => 2000 }

　attr_accessible :content, :subject
end
$ rake db:seed
（attr_accessibleを入れないとrake aborted!
Can't mass-assign protected attributes: subject, contentとなる）

routes.rbに追加
namespace :api do
    resources :announcements, :only => [ :index ]
  end

announcements_controller.rbを作成
class Api::AnnouncementsController < ApplicationController
  respond_to :xml, :json
  
  def index
    respond_with(
      Announcement.order("created_at DESC"),
      :only => [ :id, :subject, :content ],
      :skip_types => true
    )
  end
end
で表示される
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
rails g controller groups index
      create  app/controllers/groups_controller.rb
       route  get "groups/index"
      invoke  erb
      create    app/views/groups
      create    app/views/groups/index.html.erb
      invoke  test_unit
      create    test/functional/groups_controller_test.rb
      invoke  helper
      create    app/helpers/groups_helper.rb
      invoke    test_unit
      create      test/unit/helpers/groups_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/groups.js.coffee
      invoke    scss
      create      app/assets/stylesheets/groups.css.scss
rails g model group
      invoke  active_record
      create    db/migrate/20120427055811_create_groups.rb
      create    app/models/group.rb
      invoke    test_unit
      create      test/unit/group_test.rb
      create      test/fixtures/groups.yml
マイグレーションを以下にする
class CreateGroups < ActiveRecord::Migration
  def change
    create_table :groups do |t|
      t.string :name

      t.timestamps
    end
  end
end
$ rake db:migrate
seeds/groups.rbを作成
#config: utf-8

group = Group.create!(
  :name => "グループ１"
)
モデルを作成
class Group < ActiveRecord::Base
  validates :name, :presence => true
  validates :name, :uniqueness => true
  
  attr_accessible :name
end
$ rake db:reset
routes.rbに追加
resources :groups, :only => [:index]
api/groups_controller.rbを作成
class Api::GroupsController < ApplicationController
  respond_to :xml, :json
  
  def index
    @groups = Group.order("created_at DESC")
    respond_to do |format|
      format.json { render:json => @groups.to_json }
      format.xml do
        render :xml => @groups.to_xml(
          :only => [ 
            :id, :name
          ],
          :skip_types => true
        )
      end
    end
  end
end
jsonはモデルに書きます。
def as_json(options = {})
    options[:indent] ||= 2
      {
        :id => self.id,
        :name => self.name
      }
  end
とりあえず見れる
ーーーーーーーーーーーーーーーーーーーーーーーーーーー
rails g controller users index
      create  app/controllers/users_controller.rb
       route  get "users/index"
      invoke  erb
      create    app/views/users
      create    app/views/users/index.html.erb
      invoke  test_unit
      create    test/functional/users_controller_test.rb
      invoke  helper
      create    app/helpers/users_helper.rb
      invoke    test_unit
      create      test/unit/helpers/users_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/users.js.coffee
      invoke    scss
      create      app/assets/stylesheets/users.css.scss
rails g model user
      invoke  active_record
      create    db/migrate/20120427062021_create_users.rb
      create    app/models/user.rb
      invoke    test_unit
      create      test/unit/user_test.rb
      create      test/fixtures/users.yml
/model/user.rbを変更
class User < ActiveRecord::Base
  belongs_to :groups
  validates :name, :presence => true
  
  attr_accessible :name, :email, :email, 
    :sex, :country, :area, :address1, 
    :address2, :phone, :hits, :catches, :balls, :group
end
/model/group.rbに追加
has_many :users, :dependent => :destroy
マイグレーションを作成
class CreateUsers < ActiveRecord::Migration
  def change
    create_table :users do |t|
      t.references :group, :null => false
      t.string :name
      t.string :email
      t.string :sex
      t.string :country
      t.string :area
      t.string :address1
      t.string :address2
      t.string :phone
      t.text :hits
      t.text :catches
      t.text :balls

      t.timestamps
    end
    add_index :users, :group_id 
  end
end

$ rake db:migrate

development/groups.rbに追加

# coding: utf-8
group = Group.create!(
  :name => "グループ１"
)

hits = [ 100, 200, 300 ]

catches = [ 10, 20, 30, 40, 50, 60 ]
balls = [
  { :change => 1, :level => 10 },
  { :change => 2, :level => 20 },
  { :change => 3, :level => 30 },
  { :change => 4, :level => 40 },
  { :change => 5, :level => 50 },
]

10.times do |n|
  User.create!(
    :name => "名前#{n}",
    :sex => "男",
    :country => "東京",
    :area => "港区",
    :address1 => "芝大門",
    :address2 => "1-1-1-101",
    :phone => "03-1234-5678",
    :hits => hits,
    :catches => catches,
    :balls => balls,
    :group => group
    )
end
コントローラーに追加
def show
    @group = Group.find(params[:id])
    respond_to do |format|
      format.xml do
        render :xml => @group.to_xml(
          :only => [ :id, :name ],
          :skip_types => true,
          :include => [ :users ]
        )
      end
      format.json { render:json => @group.as_json_with_image }
    end
  end
モデルで表示
user.rb
def to_xml(options = {})
    options[:indent] ||= 2
    xml = options[:builder] ||= ::Builder::XmlMarkup.new(:indent => options[:indent])
    xml.user do
      xml.id id
      xml.name name
      xml.sex sex
      xml.country country
      xml.area area
      xml.address1 address1
      xml.address2 address2
      xml.phone phone
      end
    end
  end
group.rb
def as_json_with_image
    {
      :users => users.map { |u|
        {
          :id => u.id,
          :name => u.name,
          :sex => u.sex,
          :country => u.country,
          :area => u.area,
          :address1 => u.address1,
          :address2 => u.address2,
          :phone => u.phone
        }
      }
    }
  end
ここまでで配列以外表示できました。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
配列の設定
catch.rbを作成
class Catch  
  attr_accessor :value
  
  def initialize(value)
    @value = value
  end
  
  def to_i
    @value.to_i
  end
end

user.rbを設定
before_save do
    self[:catches] = catches.map do |catch|
      catch.to_i
    end
  end

def catches
    case self[:catches]
    when String
      YAML.load(self[:catches]).map { |e| Catch.new(e) }
    when Array
      self[:catches].map { |e| e.kind_of?(Catch) ? e : Catch.new(e) }
    else
      (0..5).map { |n| Catch.new(n * 100) }
    end
  end
  
  def catches=(hash_or_array)
    case hash_or_array
    when Hash
      self[:catches] = hash_or_array.keys.sort.map do |key|
        Catch.new(hash_or_array[key])
      end
    when Array
      self[:catches] = hash_or_array.map { |e| Catch.new(e) }
    end
  end

 xml.catches do
        catches.each do |c|
          xml.catches c.to_i
        end
      end
group.rbに追加(as_json_with_image)
:catches => u.catches,
を追加で確認
:hits => u.hits追加
hitsを作成
class Hit  
  attr_accessor :value
  
  def initialize(value)
    @value = value
  end
  
  def to_i
    @value.to_i
  end
end
end
user.rb
self[:hits] = hits.map do |hit|
      hit.to_i
    end
def hits
    case self[:hits]
    when String
      YAML.load(self[:hits]).map { |e| Hit.new(e) }
    when Array
      self[:hits].map { |e| e.kind_of?(Hit) ? e : Hit.new(e) }
    else
      (0..2).map { |n| Hit.new(n * 100) }
    end
  end
  
  def catches=(hash_or_array)
    case hash_or_array
    when Hash
      self[:hits] = hash_or_array.keys.sort.map do |key|
        Hit.new(hash_or_array[key])
      end
    when Array
      self[:hits] = hash_or_array.map { |e| Hit.new(e) }
    end
  end
追加
xml.hits do
        hits.each do |h|
          xml.hits h.to_i
        end
      end
追加
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


